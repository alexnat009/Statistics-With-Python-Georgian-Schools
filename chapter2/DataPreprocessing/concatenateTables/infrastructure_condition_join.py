import pandas as pd


def join1_infrastructure_condition(df1, df2, withoutDifferentBuildings, save=False, outputPath=None):
	df1 = df1.set_index(['რეგიონი', 'ქალაქი/მუნიციპალიტეტი', 'სკოლის სახელწოდება'])
	df2 = df2.set_index(['რეგიონი', 'ქალაქი/მუნიციპალიტეტი', 'სკოლის სახელწოდება'])
	common_columns = df1.columns.intersection(df2.columns)

	df2 = df2.rename(columns={col: f"{col}.1" for col in common_columns})

	# Concatenate the DataFrames along the columns, aligning by index
	result = pd.concat([df1, df2], axis=1)

	# Reset the index if needed
	result.reset_index(inplace=True)

	new_order = [
		# Location Information
		'რეგიონი',
		'ქალაქი/მუნიციპალიტეტი',
		'სკოლის სახელწოდება',

		# Identification and Codes
		'კოდი (ოთხნიშნა)',
		'კოდი (ცხრანიშნა)',

		# Building Information
		'შენობის მდგომარეობა',
		'შენობის მდგომარეობა.1',
		'საჭიროა თუ არა ახალი სკოლის აშენება',
		'შენობის ფართი, რომელიც გამოყენებაშია (კვ.მ)',
		'ეზოს ფართობი (კვ.მ)',
		'სართულების რაოდენობა',

		# Structural Conditions
		'ფასადის მდგომარეობა',
		'სახურავის მდგომარეობა',
		'პანდუსის მდგომარეობა',
		'გარე კარ-ფანჯრის მდგომარეობა',
		'ცენტრალური გათბობის მდგომარეობა',
		'ცენტრალური გათბობის მდგომარეობა.1',
		'ცენტრალური გათბობის მოწყობის ან სრული რეაბილიტაციის წელი',
		'ელექტროობის მდგომარეობა',
		'ელექტროობის მდგომარეობა.1',
		'წყალგაყვანილობის მდგომარეობა',
		'სველი წერტილების (საპირფარეშოების) ზოგადი მდგომარეობა',
		'საპირფარეშო ოთახების რაოდენობა',

		# Classroom and Floor Information
		'საკლასო ოთახების რაოდენობა',
		'I სართულის მდგომარეობა',
		'II სართულის მდგომარეობა',
		'III სართულის მდგომარეობა',
		'IV სართულის მდგომარეობა',

		# Special Rooms and Facilities
		'ადმინისტრაციის ოთახების მდგომარეობა',
		'კომპიუტერების ოთახის მდგომარეობა',
		'ბიბლიოთეკის ოთახის მდგომარეობა',
		'ბუფეტის მდგომარეობა',
		'ბუფეტის მდგომარეობა.1',
		'ფიზიკის/ქიმიის/ბიოლოგიის კაბინეტ-ლაბორატორიის (სამივე ლაბორატორია როცა ერთ ოთახშია) მდგომარეობა',
		'ფიზიკის კაბინეტ-ლაბორატორიის მდგომარეობა',
		'ქიმიის კაბინეტ-ლაბორატორიის მდგომარეობა',
		'ბიოლოგიის კაბინეტ-ლაბორატორიის მდგომარეობა',

		# Sports and Activity Areas
		'გარე სპორტული მოედნების მდგომარეობა',
		'სპორტული დარბაზების მდგომარეობა',
		'სპორტული დარბაზების რაოდენობა',
		'სააქტო დარბაზის მდგომარეობა',
		'სააქტო დარბაზის მდგომარეობა.1',

		# Other Information
		'ეზოს კეთილმოწყობა',
		'ფანჯრების ტიპი',
		'რით თბება სკოლის შენობა',
		'ცენტრალური გათბობა - (გაზი, დიზელი, ქვანახშირი, შეშა, ელექტროენერგია, ბრიკეტები, მზის სისტემა, სხვა)',
		'ინდივიდუალური  გათბობა (გაზზე, დიზელზე, ქვანახშირზე, შეშაზე, ელექტროენერგიაზე, ბრიკეტები, სხვა)'
	]

	result = result[new_order]

	for el in common_columns:
		result[el] = result[el].combine_first(result[f'{el}.1'])

	result = result.drop(columns=[f'{col}.1' for col in common_columns])

	if withoutDifferentBuildings:
		# remove the rows that doesn't have ')' at the end of the school name, this ensures that only the main building of the school is considered
		# after that remove the rows that have different scheme for naming but are the same school
		maskDf1 = result[~result['სკოლის სახელწოდება'].str.endswith(')')]

		# This was used to manually eliminate the schools that have different naming schemes
		# maskDf2 = maskDf1[~maskDf1['სკოლის სახელწოდება'].str.endswith('სკოლა')]

		# List of rows to delete
		rows_to_delete = [
			"სსიპ - ახალციხის მუნიციპალიტეტის სოფელ კლდის საჯარო სკოლა მეორე კორპუსი",
			"სსიპ - ბორჯომის მუნიციპალიტეტის დაბა წაღვერის საჯარო სკოლა  (სოფელ ცემის დაწყებითი კორპუსი",
			"სსიპ - დავით კლდიაშვილის სახელობის თერჯოლის მუნიციპალიტეტის სოფელ ზედა სიმონეთის საჯარო სკოლა  II კორპუსი",
			"სსიპ - თეთრიწყაროს მუნიციპალიტეტის სოფელ სამღერეთის საჯარო სკოლის შიხილოს აზერბაიჯანული სექტორი",
			"სსიპ - თეთრიწყაროს მუნიციპალიტეტის სოფელ ჩხიკვთას საჯარო სკოლა აბელიანის განყოფილება",
			"სსიპ - თერჯოლის მუნიციპალიტეტის სოფელ ზედა საზანოს საჯარო სკოლა II კორპუსი",
			"სსიპ - ქალაქ დედოფლისწყაროს №2 საჯარო სკოლა; დაწყებითების კორპუსი",
			"სსიპ - ქალაქ თბილისის №156 საჯარო სკოლა II კორპუსი",
			"სსიპ - ქალაქ თბილისის №161 საჯარო სკოლა \"ბ\" კორპუსი",
			"სსიპ - ქალაქ თბილისის №180 საჯარო სკოლა II კორპუსი",
			"სსიპ - ქალაქ თბილისის №192 საჯარო სკოლა  \"ბ\" კორპუსი",
			"სსიპ - ქალაქ თბილისის №215 საჯარო სკოლა  II კორპუსი",
			"სსიპ - შუახევის მუნიციპალიტეტის სოფელ შუბნის საჯარო სკოლა (კობალთის დაწყებითი კლასები",
			"სსიპ - შუახევის მუნიციპალიტეტის სოფელ შუბნის საჯარო სკოლა \n(კობალთის დაწყებითი კლასები",
			"სსიპ - შუახევის მუნიციპალიტეტის სოფელ ჭვანის საჯარო სკოლა\nცივაძეების დაწყებითი კლასი",
			"სსიპ - შუახევის მუნიციპალიტეტის სოფელ ჭვანის საჯარო სკოლა ცივაძეების დაწყებითი კლასი",
			"სსიპ - ჭიათურის მუნიციპალიტეტის სოფელ ითხვისის N1 საჯარო სკოლა  II-კორპუსი",
			"სსიპ - ცაგერის მუნიციპალიტეტის სოფელ ღვირიშის საჯარო სკოლა შერწყმული უცხერის დაწყებითი სკოლა",
			'სსიპ - ქარელის მუნიციპალიტეტის სოფელ ბრეთის მეურნეობის საჯარო სკოლას  მიერთებული სოფ სასირეთის დაწყებითი სკოლა',
			"სსიპ - ქარელის მუნიციპალიტეტის სოფელ კეხიჯვარის საჯარო სკოლა  სოფელ სამწევრისის  დაწყებითი კლასები"
		]

		# List of rows to rename
		rows_to_rename = {
			"სსიპ - დიმიტრი ხოზრევანიძისს ახელობის ხულოს მუნიციპალიტეტის სოფელ კვატიის საჯარო სკოლა (": "სსიპ - დიმიტრი ხოზრევანიძისს ახელობის ხულოს მუნიციპალიტეტის სოფელ კვატიის საჯარო სკოლა",
			"სსიპ - თერჯოლის მუნიციპალიტეტის სოფელ ზედა საზანოს საჯარო სკოლა  I კორპუსი": "სსიპ - თერჯოლის მუნიციპალიტეტის სოფელ ზედა საზანოს საჯარო სკოლა",
			'სსიპ - ვლადიმირ კომაროვის თბილისის ფიზიკა-მათემატიკის №199 საჯარო სკოლა "ა" კორპუსი': 'სსიპ - ვლადიმირ კომაროვის თბილისის ფიზიკა-მათემატიკის №199 საჯარო სკოლა',
			"სსიპ - ქალაქ დედოფლისწყაროს №2 საჯარო სკოლა; ძირითადი კორპუსი": "სსიპ - ქალაქ დედოფლისწყაროს №2 საჯარო სკოლა",
			"სსიპ - ქალაქ თბილისის №161 საჯარო სკოლა \"ა\" კორპუსი": "სსიპ - ქალაქ თბილისის №161 საჯარო სკოლა",
			"სსიპ - ქალაქ თბილისის №180 საჯარო სკოლა I კორპუსი": "სსიპ - ქალაქ თბილისის №180 საჯარო სკოლა",
			"სსიპ - ქალაქ თბილისის №192 საჯარო სკოლა  \"ა\" კორპუსი": "სსიპ - ქალაქ თბილისის №192 საჯარო სკოლა",
			"სსიპ - გალაკტიონ ტაბიძის სახელობის ხონის მუნიციპალიტეტის სოფელ ივანდიდის საჯაროსკოლა": "სსიპ - გალაკტიონ ტაბიძის სახელობის ხონის მუნიციპალიტეტის სოფელ ივანდიდის საჯარო სკოლა"
		}

		# Remove the specified rows
		result = maskDf1[~maskDf1['სკოლის სახელწოდება'].isin(rows_to_delete)]
		result = result[~((result[
							   'სკოლის სახელწოდება'] == 'სსიპ - ვლადიმირ კომაროვის თბილისის ფიზიკა-მათემატიკის №199 საჯარო სკოლა "ა" კორპუსი') & (
							  result['ეზოს ფართობი (კვ.მ)'].isna()))]

		# Rename the specified rows
		result.loc[:, 'სკოლის სახელწოდება'] = result['სკოლის სახელწოდება'].replace(rows_to_rename)
		result.drop_duplicates(subset='სკოლის სახელწოდება', keep='first', inplace=True)
		result.reset_index(drop=True, inplace=True)
	if save:
		result.to_excel(outputPath, index=False)
	return result
