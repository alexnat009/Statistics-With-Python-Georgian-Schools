import re

import pandas as pd


# noinspection SpellCheckingInspection
def revenuePreprocessings_main(df, output_path, save=False):
	df.columns = df.columns.str.replace(r'\s+', ' ', regex=True)
	working_columns = [
		'დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის შრომის ანაზღაურება',
		'მ.შ. დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის, ინკლიზიური განათლების მხარდამჭერი სპეციალისტები '
		'თანამდებობრივი სარგო (ხელფასი)',
		'მ.შ. დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის პრემია',
		'მ.შ. სპეც მასწავლებლის შრომის ანზღაურება (საათობრივი დატვირთვა და სხვა დანამატები, სქემის ფარგლებში '
		'გათვალისწინებული დანამატების გარდა)',
		'მ.შ. სპეც მასწავლებლის სქემის ფარგლებში გათვალისწინებული დანამატების ოდენობა',
		'მ.შ. სპეც მასწავლებელთა პრემია'
	]

	bad_rows = [
		"სსიპ - სელიმ ხიმშიაშვილის სახელობის ხულოს მუნიციპალიტეტის სოფელ ბაკოს საჯარო სკოლა",
		"სსიპ - ხულოს მუნიციპალიტეტის სოფელ პანტნარის საჯარო სკოლა",
		"სსიპ - ხულოს მუნიციპალიტეტის სოფელ ჩაოს საჯარო სკოლა",
		"სსიპ - მერაბ ჭელიძის სახელობის ხულოს მუნიციპალიტეტის სოფელ ირემაძეების საჯარო სკოლა"
	]
	df = df[~df['სკოლის სახელწოდება'].isin(bad_rows)]
	# # administration budget fixes
	df.loc[(pd.isna(df[working_columns[2]]) & ~pd.isna(df[working_columns[1]])) | (df[working_columns[0]] == 0),
	working_columns[2]] = 0
	df.loc[df[working_columns[0]] == df[working_columns[2]], working_columns[1]] = 0

	for i in working_columns[3:]:
		df.loc[pd.isna(df[i]) & (
				df['სკოლის სახელწოდება'] != 'სსიპ - ხულოს მუნიციპალიტეტის სოფელ დიდაჭარის საჯარო სკოლა'), i] = 0

	for column in df.columns[df.columns.get_loc("2023 წლის ბიუჯეტი"):].difference(working_columns[1:]):
		df.loc[pd.isna(df[column]), column] = 0

	if save:
		df.to_pickle(output_path)
		df.to_excel(output_path.replace('.pkl', '.xlsx'), index=False)
	return df


# List of tests formatted as a dictionary for clarity
# noinspection SpellCheckingInspection
categories = [
	{
		'sum_column': 'ხარჯები (წლიური)',
		'sum_categories': [
			'გათბობის, საწვავის და კომუნალური ხარჯი',
			'საოფისე/კომპიუტერული ტექნიკისა და ინვენტარის შეძენის, შენახვის, დამონტაჟების და ექსპლოატაციის ხარჯები',
			'დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის შრომის ანაზღაურება',
			'მივლინების ხარჯი',
			'მასწავლებელთა შრომის ანაზღაურება',
			'სპეც მასწავლებელთა შრომის ანაზღაურება',
			'სხვა ხარჯები',
			'ოფისის ხარჯები',
			'საკანცელარიო საქონლის შეძენის ხარჯი',
			'იურიდიული მომსახურების ხარჯი',
			'მიმდინარე და კაპიტალური რემონტის ხარჯები'
		]
	},
	{
		'sum_column': 'შემოსავლები (წლიური)',
		'sum_categories': [
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული დაფინანსება (ვაუჩერი)',
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული დამატებითი დაფინანსება (დანაკლისი)',
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული დაფინანსება (სკოლის მასწავლებლის სქემის '
			'შესაბამისად განსაზღვრული დანამატები)',
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული დაფინანსება (სკოლის სპეც მასწავლებლის '
			'სქემის შესაბამისად განსაზღვრული დანამატები)',
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული დაფინანსება (სკოლის ექიმი)',
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული დაფინანსება (სსმპ მოსწავლისათვის)',
			'საქართველოს განათლებისა და მეცნიერების სამინისტროდან მიღებული პროგრამული დაფინანსება',
			'სსიპ საგანმანათლებლო და სამეცნიერო ინფრასტრუქტურის სააგენტოდან მიღებული დაფინანსება',
			'ადგილობრივი თვითმართველობის ორგანოებიდან მიღებული დაფინანსება',
			'საკუთარი შემოსავალი (იჯარა, წრე და ა.შ.)',
			'სხვა შემოსავლები'
		]
	},
	{
		'sum_column': 'დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის შრომის ანაზღაურება',
		'sum_categories': [
			'მ.შ. დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის, ინკლიზიური განათლების მხარდამჭერი სპეციალისტები '
			'თანამდებობრივი სარგო (ხელფასი)',
			'მ.შ. დირექცია, ადმინისტრაციულ-ტექნიკური-პერსონალის პრემია'
		]
	},
	{
		'sum_column': 'მასწავლებელთა შრომის ანაზღაურება',
		'sum_categories': [
			'მ.შ. მასწავლებლის შრომის ანზღაურება (საათობრივი დატვირთვა და სხვა დანამატები, სქემის ფარგლებში '
			'გათვალისწინებული დანამატების გარდა)',
			'მ.შ. მასწავლებლის სქემის ფარგლებში გათვალისწინებული დანამატების ოდენობა',
			'მ.შ. მასწავლებელთა პრემია'
		]
	},
	{
		'sum_column': 'სპეც მასწავლებელთა შრომის ანაზღაურება',
		'sum_categories': [
			'მ.შ. სპეც მასწავლებლის შრომის ანზღაურება (საათობრივი დატვირთვა და სხვა დანამატები, სქემის ფარგლებში '
			'გათვალისწინებული დანამატების გარდა)',
			'მ.შ. სპეც მასწავლებლის სქემის ფარგლებში გათვალისწინებული დანამატების ოდენობა',
			'მ.შ. სპეც მასწავლებელთა პრემია'
		]
	},
	{
		'sum_column': 'გათბობის, საწვავის და კომუნალური ხარჯი',
		'sum_categories': [
			'მ.შ. შეშა',
			'მ.შ. დიზელი',
			'მ.შ. ქვანახშირი',
			'მ.შ. გაზი',
			'მ.შ. ელექტროენერგია',
			'მ.შ. წყალის ხარჯი',
			'მ.შ. ავტობუსის საწვავი',
			'მ.შ. კავშირგაბმულობა',
			'მ.შ. სხვა'
		]
	}
]


# Function to check for outliers
def check_outliers(df, categories):
	result = []
	for category in categories:
		column_name = category['sum_column']
		sub_columns = category['sum_categories']

		# Calculate the sum of sub-columns for each row
		df['calculated_sum'] = df[sub_columns].sum(axis=1, skipna=True).round()

		# Compare the calculated sum with the original column values
		df['difference'] = (df[column_name] - df['calculated_sum']).round()

		# Identify rows where the difference is not within the allowed range (-2 to 2)
		outliers = df.loc[~df['difference'].between(-2, 2), ['calculated_sum', column_name, 'difference']]

		if not outliers.empty:
			result.append(outliers)

		# Drop temporary columns
		df.drop(columns=['calculated_sum', 'difference'], inplace=True)

	return result

# Run the function
# outliers = check_outliers(df, categories)
